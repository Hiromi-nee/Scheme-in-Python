Concept:
A player controlled piece of hardware (POH) is deployed in a random location in a two dimensional grid. The grid is populated with energy cores, hostile and mobile robot guards, stationary surveillance nodes, and impassable fields of debris.

The piece of hardware consists of wheels providing n/s/e/w degrees of movement, a camera with in-built visual recognition that grants field of view vision (assuming the POH is facing north, vision is granted northwest, north, northeast, and twice north), and a destructive device pre-programmed to damage the energy cores. The POH is unable to communicate with the player due to lack of battery power to sustain conversation. The POH has a damage tolerance of X. When this reaches 0, the POH will send a message to the player with dedicated battery pack. The message is a log of events. The POH runs on a firmware written by the player and loaded before it is sent onto the grid. 

Energy cores power crucial neuro-hallucigenic chambers designed to keep scores of imprisoned humans in an illusory state. (Story to develop later: imprisonment of humans with nodes plugged into their cortexes in order to stimulate experiences all for the enjoyment of an external audience.)

Robot guards guard energy cores. They move in a pattern defending the cores. Guards have short vision (assuming it is facing north, it has vision northwest, north, and northeast.). It attacks the POH on sight. It can remove one damage reduction level every X ticks. It is granted extra vision (2 distance in a semicircle in front of it) after getting sight of POH. It chases the POH until losing sight of it.

Surveillance nodes are stationary hostiles with omnidirectional vision. It attacks the POH on sight. It removes two damage reduction levels every X ticks.

The objective is to program the POH to navigate through the energy core grid in order to place the POH adjacent to any energy core, face it, and destroy the core. There are X cores. Once the cores are destroyed, the robot is required to move towards a coordinate given to the POH at the launch point.

Time is measured in ticks. The POH has a level of battery power measured in percentages. The POH starts with 100% power. Every 1% is burned every X ticks. Program opcodes also consume ticks.

The player is presented with a prompt asking for base64 armoured input. This input is the program to be loaded into the memory of the POH at the time of launch. The program has to manage the POH autonomously without radio control due to power issues. The program is sent in machine code. After the program is received on the server, the POH is run until it achieves its objective, is damaged to the point of of failure, or its battery runs out.

The player controls the POH hardware functions in the machine code through interrupts.


The Grid

Key:
0x0 - empty traversable space
0x1 - POH
0x2 - Cores
0x3 - Tower
0x4 - Guard


CPU

The instruction set will be a 16 bit, fixed width (32 bits), word aligned instruction set.
Format for instructions in terms of bits will be:

AAAAAAAA XXXXXXXX BBBBBBBB CCCCCCCC 

A = Opcode
X = Values
B = Value Parameter
C = Opcode Parameter

Values:
0x0-0x8: register (r1-r8)
0x8-0x10: [register] ([r1]-[r8])
0x10-0x18: [register + param]
0x18-0x20: [register - param]
0x21: instruction pointer (ip)
0x22: [ip]
0x23: [ip + param]
0x24: [ip - param]
0x25: base pointer (bp)
0x26: [bp]
0x27: [bp + param]
0x28: [bp - param]
0x29: stack pointer (sp)
0x2A: [sp]
0x2B: [sp + param]
0x2C: [sp - param]
0x2D: overflow (of)
0x2E: [param]
0x2F: literal (takes the value of the next word)
0x30-0x5F: literal bytes of 0x0-0x2F


Opcodes:
0x1: set a, b - sets a to b
0x2: ADD a, b - sets a to a+b, sets O to 0x0001 if there's an overflow, 0x0 otherwise
    0x3: SUB a, b - sets a to a-b, sets O to 0xffff if there's an underflow, 0x0 otherwise
    0x4: MUL a, b - sets a to a*b, sets O to ((a*b)>>16)&0xffff
    0x5: DIV a, b - sets a to a/b, sets O to ((a<<16)/b)&0xffff. if b==0, sets a and O to 0 instead.
    0x6: MOD a, b - sets a to a%b. if b==0, sets a to 0 instead.
    0x7: SHL a, b - sets a to a<<b, sets O to ((a<<b)>>16)&0xffff
    0x8: SHR a, b - sets a to a>>b, sets O to ((a<<16)>>b)&0xffff
    0x9: AND a, b - sets a to a&b
    0xa: BOR a, b - sets a to a|b
    0xb: XOR a, b - sets a to a^b
    0xc: IFE a, b - performs next instruction only if a==b
    0xd: IFN a, b - performs next instruction only if a!=b
    0xe: IFG a, b - performs next instruction only if a>b
    0xf: IFB a, b - performs next instruction only if (a&b)!=0

DCPU-16
We will implement the DCPU-16 instead and grant the assignment of a non-basic opcode to the function of an interrupt.